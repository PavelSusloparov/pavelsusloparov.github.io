<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-01-13T00:56:27-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Pavel Susloparov Personal Blog</title><subtitle>Read about programming and software engineering processes</subtitle><entry><title type="html">What happens when you type URL in the browser?</title><link href="http://localhost:4000/networking/2020/12/20/access-url.html" rel="alternate" type="text/html" title="What happens when you type URL in the browser?" /><published>2020-12-20T15:15:36-05:00</published><updated>2020-12-20T15:15:36-05:00</updated><id>http://localhost:4000/networking/2020/12/20/access-url</id><content type="html" xml:base="http://localhost:4000/networking/2020/12/20/access-url.html">&lt;p&gt;Simple at first, the topic brings a lot of depth when we speak about each component.&lt;/p&gt;

&lt;p&gt;On the high-level:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Enter URL to the browser window.&lt;/li&gt;
  &lt;li&gt;The browser looks up the domain name in Domain Name Server(DNS).&lt;/li&gt;
  &lt;li&gt;The browser initiates a TCP connection to the server.&lt;/li&gt;
  &lt;li&gt;The browser sends an HTTP request to the server.&lt;/li&gt;
  &lt;li&gt;The server handles the request and sends the HTTP response.&lt;/li&gt;
  &lt;li&gt;The browser displays HTML content.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So far, so good. Let’s talk more about each category.&lt;/p&gt;

&lt;h2 id=&quot;enter-an-url-to-the-browser-window&quot;&gt;Enter an URL to the browser window&lt;/h2&gt;

&lt;h3 id=&quot;from-the-keypress&quot;&gt;From the keypress&lt;/h3&gt;

&lt;p&gt;When you press your keyboard key, the key presses a switch, completing the circuit behind the key.
The key matrix is a grid of circuits underneath the keys.
Completing the circuit allows a tiny amount of information to flow through to the keyboard processor.
The keyboard processor task compares the circuit’s location on the key matrix to the character map in its read-only memory.&lt;/p&gt;

&lt;p&gt;The character map is a lookup table.
In addition to simple lookups, such as ‘a’,
the lookup table has combinations such as &lt;Shift&gt; + &amp;lt;&amp;gt;&amp;gt;, which results as a '.' in the browser URL.&lt;/Shift&gt;&lt;/p&gt;

&lt;p&gt;Keep in mind that there are various keyboard types, which changes how the processor identifies a keypress.
Learn more about keyboards types &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_keyboard&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;from-keyboard-processor-to-screen&quot;&gt;From keyboard processor to screen&lt;/h3&gt;

&lt;p&gt;The signal has to carry to the screen next.
Laptops use internal connectors. Standalone keyboards use Bluetooth or USB or PS/2.
Next, the keyboard controller analyses the incoming signal and determines it is a system-level command or not.
For our use case, it is not, and the controller determines the signal as content.
The browser can work with content signals to see the URL appearing in the browser window while typing.&lt;/p&gt;

&lt;h2 id=&quot;the-browser-looks-up-the-domain-name-in-domain-name-serverdns&quot;&gt;The browser looks up the domain name in Domain Name Server(DNS).&lt;/h2&gt;

&lt;p&gt;The browser has to resolve the human-readable hostname to the IP address.
For that, it needs a lookup table, so it tries to find it in multiple places.
If the entry exists, it knows the IP address right away and does not proceed to the next step.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It goes to the browser cache.&lt;/li&gt;
  &lt;li&gt;It goes to the OS local cache.
    &lt;ul&gt;
      &lt;li&gt;Browser reaches the local cache through API to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local resolver library,&lt;/code&gt; which is part of OS.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;It goes to router cache.&lt;/li&gt;
  &lt;li&gt;It goes to the local DNS server.
    &lt;ul&gt;
      &lt;li&gt;It is configured on the client machine. An example of a local DNS is &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Public_DNS&quot;&gt;Google Public DNS&lt;/a&gt;.
Or, it is your internal service provider, like Comcast. And yes, they know about all websites which you visit.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;From the local DNS, it goes to the root server.
    &lt;ul&gt;
      &lt;li&gt;This is a high-level domain server, like .com or .io&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Root server responds to local DNS with the authoritative name server, which knows about the given hostname.&lt;/li&gt;
  &lt;li&gt;The authoritative name server responds with the end server’s exact IP address back to the local DNS server.&lt;/li&gt;
  &lt;li&gt;Local DNS server calls the end server to verify and get the IP address back.&lt;/li&gt;
  &lt;li&gt;Local DNS responds to the client machine with the IP address of the end server.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-browser-initiates-a-tcp-connection-to-the-server&quot;&gt;The browser initiates a TCP connection to the server.&lt;/h2&gt;

&lt;h3 id=&quot;protocols-intro&quot;&gt;Protocols intro&lt;/h3&gt;

&lt;p&gt;Great, the browser knows the address of the end server. Now it wants to send a request to it to get a response with HTML content back.
However, before that, the client machine needs to establish a connection to the server.&lt;/p&gt;

&lt;p&gt;The most common server-to-server communication protocol is &lt;em&gt;HyperText Transfer Protocol&lt;/em&gt;(HTTP).
It knows how to send objects, like HTML files.
HTTP is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application layer&lt;/code&gt; protocol; it relies on the Transport layer protocol to carry packets through the network.&lt;/p&gt;

&lt;p&gt;The most common &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transport layer&lt;/code&gt; protocol is &lt;em&gt;Transmission Control Protocol&lt;/em&gt;(TCP).
It guarantees message delivery in order.&lt;/p&gt;

&lt;p&gt;The most common use for our use case is a persistent connection.
In short, the browser opens a connection, send data, receives the response 
and keeps the connection open while some requests are coming from the browser.&lt;/p&gt;

&lt;h3 id=&quot;establish-the-connection&quot;&gt;Establish the connection&lt;/h3&gt;

&lt;p&gt;The most popular way to establish a TCP connection is the Three-Way Handshake.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The client sends a TCP segment with the SYN flag set, and a sequence number is a random number in TCP segment headers(not HTTP headers :) ).&lt;/li&gt;
  &lt;li&gt;The server receives the TCP segment and sends a TCP segment back with SYN and ACK flags set, and a sequence number is a random number in TCP segment headers.&lt;/li&gt;
  &lt;li&gt;The client sends a TCP segment with the ACK flag set, and the sequence number is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sequence_number + 1&lt;/code&gt; from the SYN-ACK TCP segment.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are other ways, like &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;Finite State Machine&lt;/a&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Simultaneous Connection Establishment&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-browser-sends-an-http-request-to-the-server&quot;&gt;The browser sends an HTTP request to the server.&lt;/h2&gt;

&lt;p&gt;TCP protocol has headers for each TCP segment of information, which essentially metadata to get the request assembled on the receiver side.
Read more about TCP &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;network layer&lt;/code&gt; determines how to transfer the packet with information to the end server through a chain of routers.&lt;/p&gt;

&lt;p&gt;There are multiple algorithms to keep routers lookup tables up-to-date about their neighbors.
Read more about the link-state routing protocol &lt;a href=&quot;https://en.wikipedia.org/wiki/Link-state_routing_protocol&quot;&gt;here&lt;/a&gt;.
In short, it updates each router lookup table about its neighbors and then, using Dijkstra’s algorithm, finds the shortest path in a graph.&lt;/p&gt;

&lt;p&gt;Distance-vector routing protocol &lt;a href=&quot;https://en.wikipedia.org/wiki/Distance-vector_routing_protocol&quot;&gt;here&lt;/a&gt;
In short, it is based on the Bellman-Ford algorithm,
which through the multiple broadcast repetitive actions update lookup tables based on the neighbor’s lookup tables.&lt;/p&gt;

&lt;p&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datalink layer&lt;/code&gt; needs to frame packets based on the type of the network you use, such as WiFi or LAN, or Ethernet.
Also, it provides control over the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;physical layer,&lt;/code&gt; which sends binary data.&lt;/p&gt;

&lt;p&gt;With a sequence of hops through the routers, packets reach the server.&lt;/p&gt;

&lt;p&gt;On the server-side, the layers go in reverse.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transport layer&lt;/code&gt; labels packets(multiplexing), so the server can put packets together(de-multiplexing).&lt;/p&gt;

&lt;h2 id=&quot;the-serve-handles-the-request-and-sends-an-http-response&quot;&gt;The serve handles the request and sends an HTTP response.&lt;/h2&gt;

&lt;p&gt;It all depends on the server implementation.
The server can be a standalone machine. Or, the server can be a set of machines, which play different roles,
such as Global Load Balancer, Regional Load Balancer, Application server, Database, and other application servers.
Listed components communicate through TCP and can be located in different data centers, essentially locations.
The communication process is very similar to what I described above.
Eventually, the application server does defined business logic and responds with the HTML object.&lt;/p&gt;

&lt;h2 id=&quot;the-browser-displays-html-content&quot;&gt;The browser displays HTML content.&lt;/h2&gt;

&lt;p&gt;The browser shows the HTML object on the screen.
It needs to know how to interpret the set of HTML tags to visual representation.&lt;/p&gt;

&lt;h3 id=&quot;data-object-model-dom&quot;&gt;Data Object Model (DOM)&lt;/h3&gt;

&lt;p&gt;The server returns an HTML page in binary stream format with HTTP headers, which define metadata for the HTML object.
With headers help, the browser interprets the binary stream to readable text.&lt;/p&gt;

&lt;p&gt;Then the browser creates a JavaScript object &lt;em&gt;Node&lt;/em&gt; for every tag, such as &amp;lt;html&amp;gt;, &amp;lt;body&amp;gt;, &amp;lt;div&amp;gt;.
Also, it knows the relation between those Nodes’ objects.&lt;/p&gt;

&lt;p&gt;The relationships look like a tree structure. It is called the &lt;em&gt;Data Object Model&lt;/em&gt;(DOM).
JavaScript does not understand what DOM is. It is not part of the JavaScript specifications.
DOM is a high-level WEB API, which provides capabilities to manipulate with it.&lt;/p&gt;

&lt;h3 id=&quot;cascading-style-sheet-css&quot;&gt;Cascading Style Sheet (CSS)&lt;/h3&gt;

&lt;p&gt;HTML object can contain CSS. It gives property to an HTML tag.&lt;/p&gt;

&lt;p&gt;The browser needs to apply a CSS style to a DOM element.
It creates &lt;em&gt;CSS Object Model&lt;/em&gt;(CSSOM), which has similar to DOM tree structure.
There is a default version of the CSSOM based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user agent stylesheet,&lt;/code&gt; which every browser has.
More about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user agent stylesheet&lt;/code&gt; &lt;a href=&quot;https://www.w3.org/TR/CSS21/cascade.html#cascade&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If there is a custom CSS, it overrides the default value.&lt;/p&gt;

&lt;h3 id=&quot;render-a-tree&quot;&gt;Render a tree&lt;/h3&gt;

&lt;p&gt;Then browser combines DOM and CSSOM trees through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Render-Tree&lt;/code&gt; process.&lt;/p&gt;

&lt;h3 id=&quot;paint&quot;&gt;Paint&lt;/h3&gt;

&lt;p&gt;Browser prints the result of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Render-Tree&lt;/code&gt; process with each element.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It creates a layout.
    &lt;ul&gt;
      &lt;li&gt;The layout knows each node’s size in pixels and position, which the element needs to be printed on the screen.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;It creates layers for each element in the Render-Tree.&lt;/li&gt;
  &lt;li&gt;It paints layouts by drawing them on the screen.
 Inside each layer, the browser paints each pixel based on the layer property. 
 The name of the process is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rasterization.&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;compositing&quot;&gt;Compositing&lt;/h3&gt;

&lt;p&gt;This step draws the result of the paint to the screen.
In this operation, Graphics Processing Unit(GPU) receives all layers and draw them on the screen.&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google.com&lt;/code&gt; opens in 400ms.
The browser sends a request, which makes 11 hops transfer each packet of information to the server.
It receives 86kb of data back.&lt;/p&gt;

&lt;p&gt;Try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;traceroute google.com&lt;/code&gt; in your terminal to check how many hops you have.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;</content><author><name></name></author><category term="networking" /><summary type="html">Simple at first, the topic brings a lot of depth when we speak about each component.</summary></entry><entry><title type="html">Python3 - Flask - SQLite</title><link href="http://localhost:4000/python/flask/sqlite/aws/2020/11/28/python-flask-sqlite.html" rel="alternate" type="text/html" title="Python3 - Flask - SQLite" /><published>2020-11-28T12:15:36-05:00</published><updated>2020-11-28T12:15:36-05:00</updated><id>http://localhost:4000/python/flask/sqlite/aws/2020/11/28/python-flask-sqlite</id><content type="html" xml:base="http://localhost:4000/python/flask/sqlite/aws/2020/11/28/python-flask-sqlite.html">&lt;h1 id=&quot;python3---flask---sqlite&quot;&gt;Python3 - Flask - SQLite&lt;/h1&gt;

&lt;p&gt;I wrote a small sample on Python, which includes&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Backend Flask based component&lt;/li&gt;
  &lt;li&gt;Files publishing to S3&lt;/li&gt;
  &lt;li&gt;Deployment to AWS Elastic Beanstalk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source code is here - &lt;a href=&quot;https://github.com/PavelSusloparov/warranty-service&quot;&gt;https://github.com/PavelSusloparov/warranty-service&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The service provides API that will allow the creation and retrieval of warranties.&lt;/p&gt;

&lt;h2 id=&quot;in-depths&quot;&gt;In depths&lt;/h2&gt;

&lt;h3 id=&quot;sqlite&quot;&gt;SqLite&lt;/h3&gt;

&lt;p&gt;The database is a C-language library. It is a lightweight, file base database, perfect for small projects.
It does not seem suitable for production-like applications due to limitations on simultaneous writes.
Remember, only one actor can modify a file at a time.&lt;/p&gt;

&lt;p&gt;The full feature set of the SQLite - &lt;a href=&quot;https://www.sqlite.org/features.html&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;server&quot;&gt;Server&lt;/h3&gt;

&lt;p&gt;I found it is much easier to use Flask/Python application comparing with Spring Boot/Java.
I like specifically the simplicity of the database migration part:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Database schema creates on the app bootstrap; no need for a separate script.&lt;/li&gt;
  &lt;li&gt;Initial data loads with a python script. Example is &lt;a href=&quot;https://github.com/PavelSusloparov/warranty-service/blob/master/scripts/init_db.py&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A pleasant finding for me was the Marshmallow library. It gives the ability to validate requests and check the data against the defined object during the serialization.
An example of a request object is &lt;a href=&quot;https://github.com/PavelSusloparov/warranty-service/blob/master/service/schema.py#L45&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The behavior of the validator is clear from the unit tests - &lt;a href=&quot;https://github.com/PavelSusloparov/warranty-service/blob/master/service/tests/test_routes_create_warranty.py#L53&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;s3&quot;&gt;S3&lt;/h3&gt;

&lt;p&gt;Files upload in S3 is extremely intuitive with the Boto3 library. The upload method - &lt;a href=&quot;https://github.com/PavelSusloparov/warranty-service/blob/master/service/routes.py#L64&quot;&gt;link&lt;/a&gt;.
The upload is async base and does not block the response of the endpoint.&lt;/p&gt;

&lt;h3 id=&quot;aws-elastic-beanstalk&quot;&gt;AWS Elastic Beanstalk&lt;/h3&gt;

&lt;p&gt;The SaaS service makes easier the effort of creating a docker container.
With Elastic Beanstalk CLI installed locally, you need to deploy command from the project root and answer a set of questions.
However, it takes effort to install Elastic Beanstalk CLI locally.&lt;/p&gt;

&lt;p&gt;I learned the hard way two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The tool works with Python 3.6 max(at least at the point of me doing the POC). So I had to downgrade.&lt;/li&gt;
  &lt;li&gt;I have to define my installed python binary as the interpreter for the Elasticbeanstalk CLI. Otherwise, it installs Python to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;venv.&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The last bit, which gives me around an hour of head-scratching, is the application entry point.
By default, Elastic Beanstalk is looking for application.py in the root directory and crashes on bootstrap.
I had to configure the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws:elasticbeanstalk:container:python&lt;/code&gt; option to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WSGIPath: service:application&lt;/code&gt; since my project root locates in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./service.&lt;/code&gt;
I used AWS console, Elasticbeanstalk-&amp;gt;Application-&amp;gt;Configure to set it up. Another option is to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eb configure.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Try to run the project on your local with your AWS credentials.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;</content><author><name></name></author><category term="python" /><category term="flask" /><category term="sqlite" /><category term="aws" /><summary type="html">Python3 - Flask - SQLite</summary></entry><entry><title type="html">JavaScript - React - GraphQL - MongoDb</title><link href="http://localhost:4000/javascript/graphql/mongodb/2020/05/10/react-graphql-mongodb.html" rel="alternate" type="text/html" title="JavaScript - React - GraphQL - MongoDb" /><published>2020-05-10T21:25:36-04:00</published><updated>2020-05-10T21:25:36-04:00</updated><id>http://localhost:4000/javascript/graphql/mongodb/2020/05/10/react-graphql-mongodb</id><content type="html" xml:base="http://localhost:4000/javascript/graphql/mongodb/2020/05/10/react-graphql-mongodb.html">&lt;h1 id=&quot;react-app&quot;&gt;React app&lt;/h1&gt;

&lt;p&gt;I wrote a small full-stack sample on JavaScript, which includes&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Frontend React based component&lt;/li&gt;
  &lt;li&gt;Backend GraphQL based component&lt;/li&gt;
  &lt;li&gt;MongoDB for storing the state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source code is here - &lt;a href=&quot;https://github.com/PavelSusloparov/friends-registry&quot;&gt;https://github.com/PavelSusloparov/friends-registry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The app allows you to add a friend by providing a first and last name and shows the list of current friends.&lt;/p&gt;

&lt;h2 id=&quot;in-depths&quot;&gt;In depths&lt;/h2&gt;

&lt;h3 id=&quot;mongodb&quot;&gt;MongoDB&lt;/h3&gt;

&lt;p&gt;MongoDB is a non-relational database, which has a fast bootstrap as a docker container and a free client.
Perfect for sample projects, when a document contains all required information.
I like to run sample databases in a docker container by creating a docker-compose configuration,
so it is easy to wipe the data and start from scratch.&lt;/p&gt;

&lt;p&gt;Find more information about bootstrap and connection to the database in the repo link above.&lt;/p&gt;

&lt;h3 id=&quot;server&quot;&gt;Server&lt;/h3&gt;

&lt;p&gt;GraphQL server is Apollo server - &lt;a href=&quot;https://www.apollographql.com/docs/apollo-server/&quot;&gt;https://www.apollographql.com/docs/apollo-server/&lt;/a&gt;
It positions itself as a gateway to combine multiple APIs and provide a clean interface to the frontend component.
I combined the ORM layer with the Apollo server for the sake and simplicity of the demo project.
In the production project, I recommend creating a separate backend service with the ORM layer and calling the backend service from the gateway component through an interface.&lt;/p&gt;

&lt;p&gt;Apollo gateway provides a neat browser console with capabilities to execute GraphQL queries. See the project’s documentation for more details.
The gateway provides three types of interfaces:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Query&lt;/li&gt;
  &lt;li&gt;Mutation&lt;/li&gt;
  &lt;li&gt;Subscription&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Queries fetch data; mutations modify data; subscription emits events on data modification with capabilities to react on client-side.&lt;/p&gt;

&lt;h3 id=&quot;client&quot;&gt;Client&lt;/h3&gt;

&lt;p&gt;The client is a React-based application, created using create-react-app bootstrap repo and showcase client connection between React and Apollo GraphQL.
When a user adds a new friend, the client makes a GraphQL mutation call for the creation of a new friend.
Since I know the new friend at the moment of the update, I can populate the list of friends with a fake id and refresh the id created by the database on the page refresh.
Also, the client subscribes to new friends creation events during the application bootstrap, which allows updating the friend list modified by another client without refreshing the web page.
Only one way to showcase the subscription functionality is to call GraphQL to create friend mutation through the GraphQL console or insert a new friend into the database with MongoDB client.
In this case, the new friend will appear on the friend’s list without the web page refresh.
I found the Apollo GraphQL client is much easier for understanding and use for simple use cases comparing with the Redux library.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;</content><author><name></name></author><category term="javaScript" /><category term="graphQL" /><category term="mongoDb" /><summary type="html">React app</summary></entry><entry><title type="html">Kotlin coroutines. Channels and Flows</title><link href="http://localhost:4000/kotlin/coroutines-channels-flows/2020/01/26/channels-and-flows.html" rel="alternate" type="text/html" title="Kotlin coroutines. Channels and Flows" /><published>2020-01-26T13:35:36-05:00</published><updated>2020-01-26T13:35:36-05:00</updated><id>http://localhost:4000/kotlin/coroutines-channels-flows/2020/01/26/channels-and-flows</id><content type="html" xml:base="http://localhost:4000/kotlin/coroutines-channels-flows/2020/01/26/channels-and-flows.html">&lt;h1 id=&quot;channels-and-flows&quot;&gt;Channels and Flows&lt;/h1&gt;

&lt;p&gt;The structure of your application is defined by how data flows through it.
Do various components communicate directly?
Do sources of data expose event listeners so that interested components may subscribe to changes?
Does your data consistently flow in one direction?&lt;/p&gt;

&lt;p&gt;Whatever your strategy may be, intentionality is critical.
Channels and flows represent streams of data that you can subscribe to, and they achieve this in different ways.
Let’s look at Kotlin’s built-in stream support and show how to send data throughout your application.&lt;/p&gt;

&lt;h2 id=&quot;channels&quot;&gt;Channels&lt;/h2&gt;

&lt;h3 id=&quot;channels-basic&quot;&gt;Channels Basic&lt;/h3&gt;

&lt;p&gt;Channels are a mechanism for communicating between coroutines. This Channel does nothing on its own - you need to send some data to it.
This quality of channels is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hot&lt;/code&gt;. Channels are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hot&lt;/code&gt;, because a coroutine publishes to the Channel without the receiver needed.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;https://github.com/PavelSusloparov/kotlin-channel-flows/blob/master/channels-and-flows/src/main/kotlin/NumberPrinter.kt&quot;&gt;NumberPrinter.kt&lt;/a&gt;
I launch coroutines to send numbers from 0 to 9 to a channel. Meanwhile, another coroutine listens to the Channel and print numbers to the standard output.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runBlocking&lt;/code&gt; operator helps synchronize coroutines.&lt;/p&gt;

&lt;p&gt;Let’s transform the example and separate each of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launch&lt;/code&gt; body to be a separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; function.
This type of function allows us to use other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;suspend&lt;/code&gt; functions inside and invoke function within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launch&lt;/code&gt; block.
The updated version &lt;a href=&quot;https://github.com/PavelSusloparov/kotlin-channel-flows/blob/master/channels-and-flows/src/main/kotlin/NumberPrinterV2.kt&quot;&gt;NumberPrinterV2.kt&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;channels-application&quot;&gt;Channels application&lt;/h3&gt;

&lt;p&gt;Let’s create a use case for the channels with the publisher/subscriber model.
I use an application based on &lt;a href=&quot;https://ktor.io/&quot;&gt;Ktor&lt;/a&gt; server, which provides an interface for fetching imaginary character information.
By calling &lt;a href=&quot;http://127.0.0.1:8080/&quot;&gt;http://127.0.0.1:8080/&lt;/a&gt;, I can fetch one character at a time.
Implementation of the server routes in &lt;a href=&quot;https://github.com/PavelSusloparov/kotlin-channel-flows/blob/master/character-data-api/src/Application.kt&quot;&gt;Application.kt&lt;/a&gt;.
Characters parameters in &lt;a href=&quot;https://github.com/PavelSusloparov/kotlin-channel-flows/blob/master/character-data-api/src/Character.kt&quot;&gt;Character.kt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;: Run the server by applying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./gradlew run&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let’s write a process, which broadcast characters and prints characters multiple times using non-blocking operations.
Working example is &lt;a href=&quot;https://github.com/PavelSusloparov/kotlin-channel-flows/blob/master/channels-and-flows/src/main/kotlin/CharacterFetcher.kt&quot;&gt;CharacterFetcher.kt&lt;/a&gt;
I use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;publish&lt;/code&gt; method to broadcast characters in an infinitive while loop. In the main method, we receive ten characters and close the Channel.
Other subscribers won’t be able to receive characters from the Channel after this point.&lt;/p&gt;

&lt;h2 id=&quot;flows&quot;&gt;Flows&lt;/h2&gt;

&lt;h3 id=&quot;flows-basics&quot;&gt;Flows Basics&lt;/h3&gt;

&lt;p&gt;Flows are Kotlin’s way to represent asynchronous, cold streams of data. They are similar to sequences, but they can run asynchronously with a coroutine.&lt;/p&gt;

&lt;p&gt;The flow example in &lt;a href=&quot;https://github.com/PavelSusloparov/kotlin-channel-flows/blob/master/channels-and-flows/src/main/kotlin/Flows.kt&quot;&gt;Flows.kt&lt;/a&gt;
This sequence takes the first one thousand prime numbers and emits them in a synchronous stream.
The advantage of using a sequence instead of a more traditional list for this prime number example is that sequences are unbounded.
You do not have to guess how many numbers it will take to find the first one thousand primes because sequences can emit a potentially infinite number of values.
The downside of sequences is that they operate synchronously.&lt;/p&gt;

&lt;p&gt;If you had a more complex mathematical operation or were running in a resource-constrained environment, then the need for asynchronous execution becomes more pressing.
Flows provide a non-blocking solution to data streaming that may feel familiar to you if you have used a reactive streams protocol like RxJava.&lt;/p&gt;

&lt;p&gt;In the example, I transform a sequence to Flow and collect items. After that I print Fibonacci filtered numbers.
In contrary to Channels, Flows are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cold.&lt;/code&gt; It means that the sender starts to send to emit messages when the sender starts to collect them.&lt;/p&gt;

&lt;p&gt;The Flow is generated with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asFlow&lt;/code&gt; method.
Another option to generate a flow is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flow&lt;/code&gt; operator. In the example &lt;a href=&quot;https://github.com/PavelSusloparov/kotlin-channel-flows/blob/master/channels-and-flows/src/main/kotlin/FlowsV2.kt&quot;&gt;FlowsV2.kt&lt;/a&gt;,
I emit messages in a while loop as a flow.&lt;/p&gt;

&lt;h3 id=&quot;flows-operators&quot;&gt;Flows operators&lt;/h3&gt;

&lt;p&gt;There are multiple flow operators:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;filter - filter values by given parameter&lt;/li&gt;
  &lt;li&gt;take - take several elements from the Flow&lt;/li&gt;
  &lt;li&gt;collect - invoke the Flow and receive items from the Flow. It is a terminal operator.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because flows are coroutine-based, any time that you bridge the gap between the synchronous and asynchronous world, you will use a terminal operator.&lt;/p&gt;

&lt;p&gt;There is an option to create your operators by creating an extension function for a flow as, &lt;a href=&quot;https://github.com/PavelSusloparov/kotlin-channel-flows/blob/master/channels-and-flows/src/main/kotlin/FlowsV3.kt&quot;&gt;FlowsV3.kt&lt;/a&gt;.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filterIfBelowFreezing&lt;/code&gt; is an extension function to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flow&amp;lt;Int&amp;gt;.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As a next step, I replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transform&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;emit&lt;/code&gt;, which becomes a flow transformation step &lt;a href=&quot;https://github.com/PavelSusloparov/kotlin-channel-flows/blob/master/channels-and-flows/src/main/kotlin/FlowsV4.kt&quot;&gt;FlowsV4.kt&lt;/a&gt;.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filterIfBelowFreezing&lt;/code&gt; is an example of an operator that is simple enough that basing its definition off of the existing filter operator is sensible.
For a more complex or custom operator, starting from scratch with the transform operator can be the right approach.
Note that as the take operator, the transform operator is also an experimental part of the coroutines API.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;https://github.com/PavelSusloparov/kotlin-channel-flows/blob/master/channels-and-flows/src/main/kotlin/FlowsV5.kt&quot;&gt;FlowsV5.kt&lt;/a&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filterIfBelowFreezing&lt;/code&gt; can work with multiple temperature unit as an argument.
The flow builder approach is hugely flexible for building your custom pipeline of events.&lt;/p&gt;

&lt;h2 id=&quot;learn-more&quot;&gt;Learn more&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/coroutines/basics.html&quot;&gt;Coroutines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/coroutines/channels.html&quot;&gt;Channels&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/coroutines/flow.html&quot;&gt;Flows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="kotlin" /><category term="coroutines-channels-flows" /><summary type="html">Channels and Flows</summary></entry><entry><title type="html">Evolvability of architectures styles</title><link href="http://localhost:4000/architecture/2019/11/22/evolvability-of-architectures-styles.html" rel="alternate" type="text/html" title="Evolvability of architectures styles" /><published>2019-11-22T17:35:36-05:00</published><updated>2019-11-22T17:35:36-05:00</updated><id>http://localhost:4000/architecture/2019/11/22/evolvability-of-architectures-styles</id><content type="html" xml:base="http://localhost:4000/architecture/2019/11/22/evolvability-of-architectures-styles.html">&lt;p&gt;The post describes conventional software architecture approaches and compares them based on the given architecture problem.&lt;/p&gt;

&lt;h2 id=&quot;definitions&quot;&gt;Definitions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Incremental change for the application means that a developer makes a new feature or fix a bug in the application code.&lt;/li&gt;
  &lt;li&gt;Deployment means bundling application code into an image or binary and deploying it to the production server.&lt;/li&gt;
  &lt;li&gt;Appropriate coupling implies the level of interaction between components within the application.&lt;/li&gt;
  &lt;li&gt;Fitness function represents each requirement for architecture.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;examples-of-fitness-functions&quot;&gt;Examples of Fitness Functions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Application metrics&lt;/li&gt;
  &lt;li&gt;Architecture metrics&lt;/li&gt;
  &lt;li&gt;Business logic metrics&lt;/li&gt;
  &lt;li&gt;Unit tests&lt;/li&gt;
  &lt;li&gt;Contract tests&lt;/li&gt;
  &lt;li&gt;Integration tests&lt;/li&gt;
  &lt;li&gt;Certification for changes&lt;/li&gt;
  &lt;li&gt;Compliance certification&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;fitness-function-ff-classification&quot;&gt;Fitness function (FF) classification&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Atomic &lt;em&gt;VS&lt;/em&gt; Holistic
    &lt;ul&gt;
      &lt;li&gt;Atomic FF run against a singular context&lt;/li&gt;
      &lt;li&gt;Holistic FF run against a shared context&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Triggered &lt;em&gt;VS&lt;/em&gt; Continual
    &lt;ul&gt;
      &lt;li&gt;Triggered FF run based on a particular event&lt;/li&gt;
      &lt;li&gt;Continual FF execute constant verification of architectural aspect&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Static &lt;em&gt;VS&lt;/em&gt; Dynamic
    &lt;ul&gt;
      &lt;li&gt;Static FF have a fixed result, such as binary Pass/Fail. Those are usually metrics or tests.&lt;/li&gt;
      &lt;li&gt;Dynamic FF rely on shifting definition based on extra context.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Automated &lt;em&gt;VS&lt;/em&gt; Manual&lt;/li&gt;
  &lt;li&gt;Temporal
    &lt;ul&gt;
      &lt;li&gt;It is usually a time component, which will be removed in future.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Intentional Over Emergent
    &lt;ul&gt;
      &lt;li&gt;Intentional FF defines at the beginning of the project&lt;/li&gt;
      &lt;li&gt;Emergent FF defines as project evolves and developers find &lt;em&gt;Unknown Unknowns&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Domain-Specific
    &lt;ul&gt;
      &lt;li&gt;Additional requirements such as stress test or security governance&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;architecture-classifications&quot;&gt;Architecture classifications&lt;/h2&gt;

&lt;p&gt;Since we defined basic definitions, let’s look at the known architectures.
The table below designed to help consider architecture for a new project or evolve existing project to desired level based on functional and non functional requirements.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Architecture Classification&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;How hard is to make an incremental change?&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;How hard is to make a deployment?&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;How hard is to make a guided change with a fitness function?&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;What is the level of appropriate coupling?&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Chaotic structure&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Big_ball_of_mud&quot;&gt;Big Ball of Mud&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Difficult&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Difficult&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Impossible&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Impossible&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Monolithic_application&quot;&gt;Unstructured Monoliths&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Difficult&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Difficult&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Difficult&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Tight&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Structured&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Multitier_architecture&quot;&gt;Multitier&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Difficult&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Normal&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Normal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Modular monolith&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Difficult&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Normal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Monolithic_kernel&quot;&gt;Micro kernel&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy for plugins. Difficult for core&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Normal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Event Driven&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Broker_pattern&quot;&gt;Brokers&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy for component. Medium for application&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy with proper Continuous Integration&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy. Difficult to test e2e scenarios&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Loose&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Mediator_pattern&quot;&gt;Mediators&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy for component. Medium for application&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy. Normal for testing e2e scenarios&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Normal&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Service Oriented&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Enterprise_service_bus&quot;&gt;Enterprise Service Bus driven&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Difficult&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Difficult&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Difficult&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Normal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Service-oriented_architecture&quot;&gt;Service-oriented&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Normal&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Normal&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Normal&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Normal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Microservices&quot;&gt;Micro Services&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy with proper Continuous Integration&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Loose&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Server-less&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Lambda_architecture&quot;&gt;Lambda functions&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Easy&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Loose&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;coupling-classification&quot;&gt;Coupling classification&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Tight coupling gives guaranteed side effects of changes and no breaking interface contracts.&lt;/li&gt;
  &lt;li&gt;Normal level of coupling gives possible side effects of changes and potential breaking interface contracts.&lt;/li&gt;
  &lt;li&gt;Loose coupling provides low side effects of changes breaking interface contracts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deployment&quot;&gt;Deployment&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;With a proper CI, every architecture is easy to deploy.&lt;/li&gt;
  &lt;li&gt;The time to make a CI and total deployment time per build differ proportionally to coupling.&lt;/li&gt;
  &lt;li&gt;With tight coupling, it takes more time to deploy the application to production.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Unit testing is possible in any architecture approach.&lt;/li&gt;
  &lt;li&gt;Integration testing is easier in Structured architecture.&lt;/li&gt;
  &lt;li&gt;Contract testing required for Loosely coupled architecture.&lt;/li&gt;
  &lt;li&gt;E2E testing is easier for Tight coupled architecture. Also, it is easier for architecture with synchronous components interaction.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="architecture" /><summary type="html">The post describes conventional software architecture approaches and compares them based on the given architecture problem.</summary></entry><entry><title type="html">Dockerize SpringBoot application with JIB</title><link href="http://localhost:4000/gradle/docker/jib/2019/11/19/dockerize-SpringBoot-app-with-JIB.html" rel="alternate" type="text/html" title="Dockerize SpringBoot application with JIB" /><published>2019-11-19T09:49:36-05:00</published><updated>2019-11-19T09:49:36-05:00</updated><id>http://localhost:4000/gradle/docker/jib/2019/11/19/dockerize-SpringBoot-app-with-JIB</id><content type="html" xml:base="http://localhost:4000/gradle/docker/jib/2019/11/19/dockerize-SpringBoot-app-with-JIB.html">&lt;p&gt;JIB is the plugin which create a docker container from you SpringBoot application.
It publishes the image to container registry of your choice.
Pligin abstracts creation of a docker file and publishing logic.&lt;/p&gt;

&lt;p&gt;Find more about JIB in &lt;a href=&quot;https://github.com/GoogleContainerTools/jib&quot;&gt;https://github.com/GoogleContainerTools/jib&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;To see the example in code, check &lt;a href=&quot;https://github.com/PavelSusloparov/sudoku-workshop&quot;&gt;sudoku-workshop&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.google.cloud.tools.jib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.4.0&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;jib&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ports&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8103&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mainClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.workshop.sudokubook.WorkshopApplicationKt&quot;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// good defauls intended for Java 8 (&amp;gt;= 8u191) containers&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;jvmFlags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
			&lt;span class=&quot;s&quot;&gt;&quot;-server&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;s&quot;&gt;&quot;-Djava.awt.headless=true&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;s&quot;&gt;&quot;-XX:InitialRAMFraction=2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;s&quot;&gt;&quot;-XX:MinRAMFraction=2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;s&quot;&gt;&quot;-XX:MaxRAMFraction=2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;s&quot;&gt;&quot;-XX:+UseG1GC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;s&quot;&gt;&quot;-XX:MaxGCPauseMillis=100&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;s&quot;&gt;&quot;-XX:+UseStringDeduplication&quot;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Simple configuration gives you three additional gradle tasks.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./gradlew tasks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
Jib tasks
&lt;span class=&quot;nt&quot;&gt;---------&lt;/span&gt;
jib - Builds a container image to a registry.
jibBuildTar - Builds a container image to a tarball.
jibDockerBuild - Builds a container image to a Docker daemon.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jibDockerBuild&lt;/code&gt; to get the image ready.
I prefer using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt; to run multiple images together.&lt;/p&gt;

&lt;p&gt;Example of the configuration is&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql01&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3308:3306&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;env_file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sec.env&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./conf.d:/etc/mysql/conf.d:ro&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sudoku&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sudoku&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sudoku:0.0.1-SNAPSHOT&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;env_file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sec.env&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8102:8102&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sudoku-book&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sudoku-book&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sudoku-book:0.0.1-SNAPSHOT&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;env_file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sec.env&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8103:8103&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;start_dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dadarek/wait-for-dependencies&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db:3306&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Two exciting things in the configuration above:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dadarek/wait-for-dependencies&lt;/code&gt; image, which gives the ability for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudoku-book&lt;/code&gt; wait until
MySQL will be up and running.&lt;/li&gt;
  &lt;li&gt;Volume configuration for MySQL container contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-entrypoint-initdb.d&lt;/code&gt;.
This is the place to define bootstrap SQL script to seed your database instance with initial data such as custom users, permissions and database schema.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I prefer to wire docker-compose and Gradle in a bash script, which gives a user one button run.
The advantage is abstract application bootstrap and makes it simple.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;ROOT_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ROOT_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ROOT_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Generate image for Sudoku application&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ROOT_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/sudoku
./gradlew jibDockerBuild

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ROOT_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/sudoku-book
&lt;span class=&quot;c&quot;&gt;# Generate image for Sudoku Book application&lt;/span&gt;
./gradlew jibDockerBuild

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ROOT_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Start both applications&lt;/span&gt;
docker-compose up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I always strive to simplify developer life for onboarding new people to the application and encourage you to invest time in proper setup.&lt;/p&gt;</content><author><name></name></author><category term="gradle" /><category term="docker" /><category term="jib" /><summary type="html">JIB is the plugin which create a docker container from you SpringBoot application. It publishes the image to container registry of your choice. Pligin abstracts creation of a docker file and publishing logic.</summary></entry><entry><title type="html">Unit tests code coverage with Jacoco</title><link href="http://localhost:4000/kotlin/test/code-coverage/2019/11/18/unit-tests-code-coverage-with-jacoco.html" rel="alternate" type="text/html" title="Unit tests code coverage with Jacoco" /><published>2019-11-18T09:49:36-05:00</published><updated>2019-11-18T09:49:36-05:00</updated><id>http://localhost:4000/kotlin/test/code-coverage/2019/11/18/unit-tests-code-coverage-with-jacoco</id><content type="html" xml:base="http://localhost:4000/kotlin/test/code-coverage/2019/11/18/unit-tests-code-coverage-with-jacoco.html">&lt;p&gt;Code coverage is a code quality metric.
It helps to monitor the application quality trend by storing the metric value over time.&lt;/p&gt;

&lt;p&gt;I feel skeptical about having 100% coverage:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Instead of writing useful unit tests, developers chasing reaching the threshold coverage number&lt;/li&gt;
  &lt;li&gt;it brings unnecessary coverage for setters and getters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My team found a compromise for 75% code coverage as a quality gate.
It gives us the power to move forward with features delivery in a reasonable time.&lt;/p&gt;

&lt;p&gt;Jacoco plugin gives ability to produce a metric based on JUnit test run.&lt;/p&gt;

&lt;p&gt;More about plugin in &lt;a href=&quot;https://www.jacoco.org/jacoco/trunk/index.html&quot;&gt;https://www.jacoco.org/jacoco/trunk/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make the task run as part of the application test nad you can track the coverage locally.
The next step is to monitor the metric over time. For that, you can use CI pipeline to publish reports in SonarQube,
so you can see how product and engineering decisions affect the quality of your applications.&lt;/p&gt;

&lt;h2 id=&quot;configuration-setup&quot;&gt;Configuration setup&lt;/h2&gt;

&lt;p&gt;To see the example in code, check &lt;a href=&quot;https://github.com/PavelSusloparov/sudoku-workshop&quot;&gt;sudoku-workshop&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;build.gradle.kts configuration&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Code Coverage plugin&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;jacoco&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Jacoco Plugin&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;jacoco&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;toolVersion&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.8.4&quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;reportsDir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$buildDir/reports/jacoco&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Jacoco Coverage Report&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;jacocoTestReport&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JacocoReport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;reports&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEnabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// human readable&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEnabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// required by coveralls&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;doLast&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jacoco tests coverage report: &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projectDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/build/reports/jacoco/test/html/index.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Jacoco Enforce Code Coverage&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;jacocoTestCoverageVerification&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JacocoCoverageVerification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;violationRules&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Every class should be tested&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CLASS&quot;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.workshop.*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;// Coverage for classes. Strive for 75%.&lt;/span&gt;
			&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CLASS&quot;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;COVEREDRATIO&quot;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;minimum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

				&lt;span class=&quot;n&quot;&gt;excludes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
					&lt;span class=&quot;s&quot;&gt;&quot;com.example.workshop.WorkshopApplication&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;s&quot;&gt;&quot;com.example.workshop.WorkshopApplicationKt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;c1&quot;&gt;//Application&lt;/span&gt;
					&lt;span class=&quot;s&quot;&gt;&quot;com.example.workshop.collections.*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;s&quot;&gt;&quot;com.example.workshop.configuration.*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;s&quot;&gt;&quot;com.example.workshop.controllers.*&quot;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Coverage on lines of code. Strive for 75%.&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CLASS&quot;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.workshop.*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

			&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LINE&quot;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;COVEREDRATIO&quot;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;minimum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

				&lt;span class=&quot;n&quot;&gt;excludes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
					&lt;span class=&quot;s&quot;&gt;&quot;com.example.workshop.WorkshopApplication&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;s&quot;&gt;&quot;com.example.workshop.WorkshopApplicationKt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;c1&quot;&gt;//Application&lt;/span&gt;
					&lt;span class=&quot;s&quot;&gt;&quot;com.example.workshop.collections.*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;s&quot;&gt;&quot;com.example.workshop.configuration.*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
					&lt;span class=&quot;s&quot;&gt;&quot;com.example.workshop.controllers.*&quot;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;finalizedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jacocoTestCoverageVerification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jacocoTestReport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// always run tests before code coverage is collected&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jacocoTestReport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dependsOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jacocoTestCoverageVerification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dependsOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jacocoTestCoverageVerification,&lt;/code&gt; there are two rule sections, which allow you to exclude classes from the code coverage verification.&lt;/p&gt;

&lt;p&gt;My advice is to be careful with updating lists, and they might grow if you tend to compromise the quality over the speed of delivery.
Use code review process and code owners to prevent the list of growing.&lt;/p&gt;</content><author><name></name></author><category term="kotlin" /><category term="test" /><category term="code-coverage" /><summary type="html">Code coverage is a code quality metric. It helps to monitor the application quality trend by storing the metric value over time.</summary></entry><entry><title type="html">Custom source set for Gradle project</title><link href="http://localhost:4000/kotlin/test/source-sets/2019/11/17/source-set-for-gradle-project.html" rel="alternate" type="text/html" title="Custom source set for Gradle project" /><published>2019-11-17T18:32:36-05:00</published><updated>2019-11-17T18:32:36-05:00</updated><id>http://localhost:4000/kotlin/test/source-sets/2019/11/17/source-set-for-gradle-project</id><content type="html" xml:base="http://localhost:4000/kotlin/test/source-sets/2019/11/17/source-set-for-gradle-project.html">&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Source set&lt;/code&gt; is a package, which has it is own compilation and runtime configuration as well as dependencies.
IntelijIdea project builder creates &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt; source sets for a Gradle project module by default.&lt;/p&gt;

&lt;p&gt;My two reasons why you want to create a custom source set:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You want to have separate your integration and e2e tests out of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt; source set.&lt;/li&gt;
  &lt;li&gt;You want to separate dependencies between packages within the same module.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;To see the example in code, check &lt;a href=&quot;https://github.com/PavelSusloparov/sudoku-workshop&quot;&gt;sudoku-workshop&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;file-structure&quot;&gt;File structure&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Create a new folder under /src. An example case is sudoku-book/testUtil&lt;/li&gt;
  &lt;li&gt;Keep a similar structure as your primary source set.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For kotlin:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;src/kotlin
src/resources
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Namespace stays the same as in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;src/kotlin/com/workshop/sudokubook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;gradle-configuration&quot;&gt;Gradle configuration&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Update build.gradle.kts configuration with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contractTest&lt;/code&gt; source set configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sourceSets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contractTest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;withConvention&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;KotlinSourceSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;srcDirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/contractTest/kotlin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;srcDirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/contractTest/resources&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;compileClasspath&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceSets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceSets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testUtil&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;runtimeClasspath&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceSets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceSets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testUtil&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contractTestCompile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extendsFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;compile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testUtilCompile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contractTestRuntime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extendsFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;runtime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testUtilRuntime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;contractTestCompile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contractTestCompile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;contractTestRuntime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contractTestRuntime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contractTest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Runs Cucumber contract tests.&quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;verification&quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;testClassesDirs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceSets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contractTest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classesDirs&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceSets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contractTest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runtimeClasspath&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upToDateWhen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nf&quot;&gt;testLogging&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TestLogEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SKIPPED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestLogEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FAILED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;showStandardStreams&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;systemProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cucumber.options&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scenario&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;compileClasspath and runtimeClasspath have multiple dependencies on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testUtil&lt;/code&gt; source sets. It means that
classes defined in these spaces available for import in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contractTest&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;New registered test task &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contractTest&lt;/code&gt; has testClassesDirs and classpath properties, which reference on contractTest
source set.&lt;/p&gt;

&lt;h3 id=&quot;dependencies&quot;&gt;Dependencies&lt;/h3&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stdlib-jdk8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;script-runtime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;testImplementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.junit.platform:junit-platform-console:1.4.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;componentTestCompile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.3.21&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;testUtilCompile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.3.21&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implementation&lt;/code&gt; keyword stands for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; source set compilation and runtime dependencies.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compile&lt;/code&gt; keyword stands for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; source set compilation dependencies only.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime&lt;/code&gt; keyword stands for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; source set runtime dependencies only.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Custom source set always extends &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; configuration,
so it has a similar three types of dependencies with your registered keywords.&lt;/p&gt;

&lt;p&gt;Try to use source sets on your project, and I personally found them useful.&lt;/p&gt;</content><author><name></name></author><category term="kotlin" /><category term="test" /><category term="source-sets" /><summary type="html">Source set is a package, which has it is own compilation and runtime configuration as well as dependencies. IntelijIdea project builder creates main and test source sets for a Gradle project module by default.</summary></entry><entry><title type="html">GitHub commit hooks for better release notes</title><link href="http://localhost:4000/github/automation/2019/11/16/github-commit-hook.html" rel="alternate" type="text/html" title="GitHub commit hooks for better release notes" /><published>2019-11-16T16:32:36-05:00</published><updated>2019-11-16T16:32:36-05:00</updated><id>http://localhost:4000/github/automation/2019/11/16/github-commit-hook</id><content type="html" xml:base="http://localhost:4000/github/automation/2019/11/16/github-commit-hook.html">&lt;p&gt;I love using automation for improving the team processes.&lt;/p&gt;

&lt;p&gt;If you need to have a clean commit history and be able to use it for release notes, you want to use GitHub local hook.
It gives ability to add ticket tracking system number(in my case JIRA) to every commit message automatically.&lt;/p&gt;

&lt;p&gt;The trick is to name your branch as feature/PROJ-XXXX-branch-description and for every commit, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROJ-XXXX&lt;/code&gt; prepends
automatically to the message as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[PROJ-XXXX] commit description&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Find scripts and installation instruction in &lt;a href=&quot;https://github.com/PavelSusloparov/git-hook&quot;&gt;https://github.com/PavelSusloparov/git-hook&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="github" /><category term="automation" /><summary type="html">I love using automation for improving the team processes.</summary></entry><entry><title type="html">Generate objects based on GraphQL schema</title><link href="http://localhost:4000/graphql/automation/2019/11/12/generate-objects-based-on-GraphQL-schema.html" rel="alternate" type="text/html" title="Generate objects based on GraphQL schema" /><published>2019-11-12T15:50:36-05:00</published><updated>2019-11-12T15:50:36-05:00</updated><id>http://localhost:4000/graphql/automation/2019/11/12/generate-objects-based-on-GraphQL-schema</id><content type="html" xml:base="http://localhost:4000/graphql/automation/2019/11/12/generate-objects-based-on-GraphQL-schema.html">&lt;p&gt;This the post for you if you use microservices architecture and use GraphQL for your API.
I’m sharing two tips on how to keep GraphQL contracts up-to-date between server and client.&lt;/p&gt;

&lt;h3 id=&quot;tip-1-is-generate-your-server-side-model&quot;&gt;Tip #1 is ‘Generate your server side model’&lt;/h3&gt;

&lt;p&gt;Save time with POJO object generation with&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kobylynskyi/graphql-java-codegen&quot;&gt;https://github.com/kobylynskyi/graphql-java-codegen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kobylynskyi/graphql-java-codegen-gradle-plugin&quot;&gt;https://github.com/kobylynskyi/graphql-java-codegen-gradle-plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The plugin allows generating Java model classes based on the GraphQL schema.
In my example for the server-side, I use Kotlin as a programming language and Spring Boot as a framework with GraphQl
HTTP API&lt;/p&gt;

&lt;p&gt;In your build.gradle.kts&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;register the task with parameters&lt;/li&gt;
  &lt;li&gt;include generated files to the ‘main’ source set&lt;/li&gt;
  &lt;li&gt;run the job as part of the build&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GraphqlCodegenGradleTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;graphqlCodegenService&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;graphqlSchemaPaths&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$projectDir/src/main/resources/graphql/schema.graphqls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outputDir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$buildDir/generated/outputDir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;packageName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.example.service&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;customTypesMapping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableMapOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EpochMillis&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;java.time.LocalDateTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;customAnnotationsMapping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableMapOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EpochMillis&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.fasterxml.jackson.databind.annotation&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;.JsonDeserialize(using = com.example.service.EpochMillisScalarDeserializer.class)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;modelValidationAnnotation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;javax.validation.constraints.NotNull&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;sourceSets&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;srcDirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$buildDir/generated/outputDir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;graphqlCodegenService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultTask&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;KotlinCompile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;KotlinJvmOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;dependsOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graphqlCodegenService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;kotlinOptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;freeCompilerArgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-Xjsr305=strict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;jvmTarget&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.8&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The build command generates classes in your build directory, and they are available for import&lt;/p&gt;

&lt;h3 id=&quot;tip-2-is-generate-your-client-side-model&quot;&gt;Tip #2 is ‘Generate your client side model’&lt;/h3&gt;

&lt;p&gt;For the client-side, we want to generate classes based on the server-side schema and client-side GraphQL queries
For that, I use &lt;a href=&quot;https://github.com/apollographql/apollo-tooling#apollo-clientcodegen-output&quot;&gt;apollo codegen&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npx apollo client:download-schema &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--endpoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://localhost:8104/graphql &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    src/client/generated/graphql/generatedSchema.json
npx apollo client:codegen &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;typescript &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--localSchemaFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/client/generated/graphql/generatedSchema.json &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--includes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./src/**/*.{ts,tsx}'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--addTypename&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--tagName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gql &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--globalTypesFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/client/generated/graphql/graphqlGlobalTypes.ts &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--outputFlat&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    src/client/generated/graphql/generatedTypes.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first command fetches the schema and outputs it to generatedSchema.json
The second command generates typescript types and interfaces based on generatedSchema.json and outputs them to two files:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Types go to graphqlGlobalTypes.ts&lt;/li&gt;
  &lt;li&gt;Interfaces go to generatedTypes.ts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The server needs objects for whole GraphQL schema
The client needs objects based on server GraphQL schema and client GraphQL queries.&lt;/p&gt;</content><author><name></name></author><category term="graphQL" /><category term="automation" /><summary type="html">This the post for you if you use microservices architecture and use GraphQL for your API. I’m sharing two tips on how to keep GraphQL contracts up-to-date between server and client.</summary></entry></feed>